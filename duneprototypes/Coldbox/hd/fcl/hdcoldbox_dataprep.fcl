#include "PdspChannelMapService.fcl"
#include "protoDUNE_reco_data_Dec2018.fcl"
#include "protodune_tools_dune.fcl"
#include "hdcb_dataprep_tools.fcl"

process_name: HDRawDigit

services: 
{
  TimeTracker:           @local::dune_time_tracker
  MemoryTracker:         @local::dune_memory_tracker
  RandomNumberGenerator: {} # ART native random number generator
  message:               @local::dune_message_services_prod
  FileCatalogMetadata:   @local::art_file_catalog_data
                         @table::protodune_rawdecoding_services
                         @table::protodune_data_reco_services
  PdspChannelMapService: @local::pdspchannelmap
    

  TFileService: 
  { 
      closeFileFast: true  # default
      fileName: "hist_%ifb_decoder_reco1.root"
  }
  IFBeam:            {}
  IFDH:              {}

  ChannelStatusService: @local::data.ChannelStatusService_hdcb1     # Cold running
  Geometry: @local::protodunev7_geo

}
services.DatabaseUtil: @erase

physics: {
  producers: {
    caldata: @local::protoDUNE_reco_data_producers.caldata
  }

  produce: [
    caldata
  ]

  output: [out1]
  trigger_paths: [produce]
  end_paths: [output]
}

outputs: {
  out1: {
    compressionLevel: 1
    module_type: RootOutput
    saveMemoryObjectThreshold: 10485760
    fileName: "%ifb_reco1.root"
    dataTier:    "full-reconstructed"
    #outputCommands: [ "drop *", "keep raw::RawDigit*_*_*_*", "keep recob::*_*_*_*" ]
  }
}

source:
{
    module_type: RootInput
    maxEvents : -1
}

tools.hdtool: {
  tool_type: "HDColdboxDataInterface"
  ForceOpen: true
}


services.LArFFT.FFTSize: 10000
physics.producers.caldata.DecoderTool: "hdtool"
physics.producers.caldata.OnlineChannelMapTool: pd_onlineChannelMapByFemb
physics.producers.caldata.OutputDigitName: "dataprep"
physics.producers.caldata.OutputWireName: "dataprep"
physics.producers.caldata.ChannelGroups: ["apa1"]
physics.producers.caldata.LogLevel: 3

services.RawDigitPrepService.ToolNames: [
  digitReader,            # Unpack the digits acd.raw[] and acd.pedestal
  adcSampleFiller,        # Fill acd.samples from acd.raw - pedestal
  vdcbb_adcChannelPedestalPlotter,   # Plot pedestals
  vdcbb_adcChannelRawRmsPlotter,     # Plot ADC-pedestal RMS
  adcKeepAllSignalFinder  # Flag all samples as signal, i.e. acd.signal[] = true
]

tools.vdcbb_adcChannelRawRmsPlotter.MetricMax: 100



